{"ast":null,"code":"import _objectSpread from \"/Users/jneto/dev/proj/websites/anarp/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/jneto/dev/proj/websites/anarp/src/components/Select.js\";\nimport React, { Component } from 'react';\nimport Card from './Card';\nimport Button from './Button';\nimport './Select.css';\n\nconst prepareOptions = options => options && typeof options[0] === 'string' ? options.map((e, i) => ({\n  key: i,\n  label: e\n})) : options;\n\nconst defaultMenuItem = (props, i) => {\n  let cls = props.cls ? 'MenuItem' : '';\n  cls += props.selected ? ' Selected' : '';\n  return React.createElement(\"li\", {\n    className: cls,\n    onClick: () => props.onSelect(i),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, props.label);\n};\n\nconst defaulCardItem = (props, i) => {\n  let cls = props.cls;\n  cls += props.selected ? ' Selected' : '';\n  return React.createElement(Card, Object.assign({}, props, {\n    className: cls,\n    onClick: () => props.onSelect(i),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }));\n};\n\nclass Select extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      if (this.mode === 'dropdown' || this.mode === 'pulldown') document.addEventListener(\"mousedown\", this.clickOutside);\n      if (this.mode === 'flat') this.setState({\n        selectedLabel: this.props.options[1].label\n      }); // --> Find first leaf\n\n      this.setState({\n        options: prepareOptions(this.props.options)\n      });\n    };\n\n    this.componentDidUpdate = prevProps => {\n      if (JSON.stringify(this.props.options) === JSON.stringify(prevProps.options)) return;\n      this.setState({\n        options: prepareOptions(this.props.options)\n      });\n    };\n\n    this.componentWillUnmount = () => document.removeEventListener(\"mousedown\", this.clickOutside);\n\n    this.clickOutside = event => {\n      if (this.container.current && !this.container.current.contains(event.target)) this.setState({\n        open: false\n      });\n    };\n\n    this.open = () => this.setState({\n      open: !this.state.open\n    });\n\n    this.close = () => this.setState({\n      open: false\n    });\n\n    this.select = n => {\n      if (this.state.value != this.state.options[n].label) this.setState({\n        value: this.state.options[n].label,\n        open: false\n      });\n      this.close();\n    };\n\n    this.setSelect = id => {\n      if (!this.state.options) return;\n      let n = this.state.options.findIndex(e => e.id === id);\n      this.setState({\n        selected: n\n      });\n    };\n\n    this.onClick = e => {\n      this.setState({\n        dropDownValue: e.currentTarget.textContent\n      });\n    };\n\n    this.onSelect = n => {\n      this.close();\n      this.setState({\n        selected: n\n      });\n      if (this.props.onSelect) this.props.onSelect(n);\n    };\n\n    this.onSelectFlat = e => {\n      if (!e.leaf) return;else this.setState({\n        selectedLabel: e.label\n      });\n      if (this.props.onSelect) this.props.onSelect(e);\n    };\n\n    this.item = e => {\n      let folder = 'leaf' in e && e.leaf === false;\n      let icon = folder ? 'selector-right' : null;\n      let cls = folder ? 'SelectFolder' : 'SelectItem';\n      if (e.label === this.state.selectedLabel) cls += ' Selected';\n      return React.createElement(\"div\", {\n        className: `SelectRow ${cls}`,\n        onClick: () => this.onSelectFlat(e),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, icon && React.createElement(Button, {\n        icon: icon,\n        iconsize: 8,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, e.label));\n    };\n\n    this.container = React.createRef();\n    this.state = {\n      open: false,\n      options: prepareOptions(this.props.options),\n      value: 'default',\n      selected: 0,\n      selectedLabel: '',\n      dropDownValue: this.props.title\n    };\n    this.menuItem = this.props.menuItem || defaultMenuItem;\n    this.cardItem = this.props.cardItem || defaulCardItem;\n    const MODES = ['menu', 'icons', 'buttons', 'dropdown', 'pulldown', 'flat'];\n    this.mode = null;\n    MODES.forEach(e => {\n      if (e in this.props) this.mode = e;\n    });\n  }\n\n  render() {\n    if (!this.state.options) return null;\n    let cls;\n\n    switch (this.mode) {\n      case 'menu':\n        cls = this.props.vertical ? 'Select Menu Vertical' : 'Select Menu';\n        cls += this.props.underline ? ' Underline' : '';\n        cls += this.props.left ? ' Left' : '';\n        return React.createElement(\"div\", {\n          className: cls,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122\n          },\n          __self: this\n        }, this.state.options.map((e, i) => {\n          let selected = i == this.state.selected;\n\n          let props = _objectSpread({}, e, {\n            selected: selected,\n            onSelect: () => this.onSelect(i)\n          });\n\n          return this.menuItem(props, i);\n        }));\n\n      case 'icons':\n        return React.createElement(\"div\", {\n          className: \"Select Icons\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"Group\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133\n          },\n          __self: this\n        }, this.state.options.map((e, i) => React.createElement(Button, {\n          icon: e.label,\n          iconsize: 20,\n          id: i,\n          selected: i == this.state.selected,\n          onClick: e => this.onSelect(i),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135\n          },\n          __self: this\n        }))));\n\n      case 'buttons':\n        return React.createElement(\"div\", {\n          className: \"Select Buttons\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142\n          },\n          __self: this\n        }, this.state.options.map((e, i) => React.createElement(Button, {\n          text: e.label,\n          id: i,\n          selected: i == this.state.selected,\n          onClick: e => this.onSelect(i),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144\n          },\n          __self: this\n        })));\n\n      case 'dropdown':\n        return React.createElement(\"div\", {\n          className: \"Select DropDown\",\n          ref: this.container,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150\n          },\n          __self: this\n        }, this.props.label && React.createElement(\"span\", {\n          className: \"Label\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151\n          },\n          __self: this\n        }, this.props.label), React.createElement(\"div\", {\n          className: \"Filter\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"Value\",\n          onClick: this.open,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153\n          },\n          __self: this\n        }, this.state.options[this.state.selected].label), React.createElement(\"div\", {\n          className: \"Control\",\n          onClick: this.open,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156\n          },\n          __self: this\n        }, React.createElement(Button, {\n          iconsize: 12,\n          icon: \"selector-down\",\n          onClick: this.open,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          },\n          __self: this\n        }))), this.state.open && this.props.options && React.createElement(\"div\", {\n          className: \"Options\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161\n          },\n          __self: this\n        }, this.state.options.map((e, i) => React.createElement(\"li\", {\n          onClick: () => this.select(i),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163\n          },\n          __self: this\n        }, e.label))));\n\n      case 'pulldown':\n        return React.createElement(\"div\", {\n          className: \"Select PullDown\",\n          ref: this.container,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 170\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"PullDownButton\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 171\n          },\n          __self: this\n        }, React.createElement(Button, {\n          iconsize: 24,\n          icon: this.props.icon,\n          onClick: this.open,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 172\n          },\n          __self: this\n        })), this.state.open && this.props.options && React.createElement(\"div\", {\n          className: \"Options\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 175\n          },\n          __self: this\n        }, this.state.options.map((e, i) => {\n          let props = _objectSpread({}, e, {\n            onSelect: () => this.onSelect(i)\n          });\n\n          return this.menuItem(props, i);\n        })));\n\n      case 'flat':\n        return React.createElement(\"div\", {\n          className: \"Select Flat\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 186\n          },\n          __self: this\n        }, this.props.title && React.createElement(\"h2\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 187\n          },\n          __self: this\n        }, this.props.title), React.createElement(\"div\", {\n          className: \"List\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 188\n          },\n          __self: this\n        }, this.state.options.map(e => this.item(e))));\n\n      default:\n        return null;\n    }\n  }\n\n}\n\nexport default Select;\n\nconst build_idxs = menu => {\n  if (!menu) return [];\n  let keys = [];\n\n  for (let idx1 = 0; idx1 < menu.length; idx1++) if ('menu' in menu[idx1]) for (let idx2 = 0; idx2 < menu[idx1].menu.length; idx2++) keys.push({\n    'idx1': idx1,\n    'idx2': idx2\n  });else keys.push({\n    'idx1': idx1,\n    'idx2': null\n  });\n\n  return keys;\n};\n\nconst find = (idxs, idx1, idx2) => idxs.findIndex(e => e.idx1 === idx1 && e.idx2 === idx2); // class SideNav extends Component {\n//   constructor(props) {\n//       super(props)\n//       this.state = {\n//           idx: 0,\n//           idx1: 0,\n//           idx2: null,\n//           selectedLabel1: this.props.config ? this.props.config[0].label : null,\n//           selectedLabel2: null,\n//       }\n//       this.onClick1 = this.onClick1.bind(this)\n//       this.onClick2 = this.onClick2.bind(this)\n//       this.nav = this.nav.bind(this)\n//       this.menu = this.props.config\n//       this.idxs = build_idxs(this.props.config)\n//   }\n//   componentDidMount() {\n//       //this.setState({idx1: 0, idx2: 0, selectedLabel1: this.menu[0].label, selectedLabel2: this.menu[0].menu[0].label})\n//       //this.props.onAction(this.menu[0].menu[0])\n//   }\n//   nav_firt() {\n//       let label1 = this.menu[0].label\n//       let label2 = this.menu[0].menu[0].label\n//       this.setState({idx1: 0, idx2: 0, selectedLabel1: label1, selectedLabel2: label2})\n//       this.props.onAction(this.menu[0].menu[0])\n//   }\n//   nav(id) {\n//       let label1, label2\n//       let idx = find(this.idxs, this.state.idx1, this.state.idx2)\n//       if(id===0)\n//           idx = idx > 0 ? idx-1 : this.idxs.length-1\n//       if(id===1)\n//           idx = idx < this.idxs.length-1 ? idx+1 : 0\n//       let idx1 = this.idxs[idx].idx1\n//       let idx2 = this.idxs[idx].idx2\n//       label1 = this.menu[idx1].label\n//       if(idx2==null) {\n//           this.setState({idx1: idx1, idx2: null, selectedLabel1: label1, selectedLabel2: null})\n//           this.props.onAction(this.menu[idx1])\n//       } else {\n//           label2 = this.menu[idx1].menu[idx2].label\n//           this.setState({idx1: idx1, idx2: idx2, selectedLabel1: label1, selectedLabel2: label2})\n//           this.props.onAction(this.menu[idx1].menu[idx2])\n//       }\n//   }\n//   onClick1(label) {\n//       const idx1 = this.menu.findIndex(e => e.label===label)\n//       this.setState({ idx1: idx1, idx2: null, selectedLabel1: label })\n//       if('menu' in this.menu[idx1]) {\n//           this.setState({idx1: idx1, selectedLabel2: null})\n//           this.props.onAction(null)\n//           return\n//       }\n//       this.props.onAction(this.menu[idx1])\n//   }\n//   onClick2(label) {\n//       const idx2 = this.menu[this.state.idx1].menu.findIndex(e => e.label===label)\n//       this.setState({ idx2: idx2, selectedLabel2: label })\n//       this.props.onAction(this.menu[this.state.idx1].menu[idx2])\n//   }\n//   render_col1() {\n//       if(!this.props.config) return null\n//       let className\n//       return(\n//           this.props.config.map((e) => {\n//               className = e.label===this.state.selectedLabel1 ? className='selected' : ''\n//               return(<li className={className} onClick={_ => this.onClick1(e.label)}>{e.label}</li>)\n//           })\n//       )\n//   }\n//   render_col2() {\n//       if(!this.props.config) return null\n//       let className\n//       const idx1 = this.state.idx1\n//       if(idx1==null || !('menu' in this.props.config[idx1]))\n//           return undefined\n//       return(\n//           this.props.config[idx1].menu.map((e) => {\n//               className = e.label===this.state.selectedLabel2 ? className='selected' : ''\n//               return(<li className={className} onClick={_ => this.onClick2(e.label)}>{e.label}</li>)\n//       })\n//       )\n//   }\n//   render() {\n//       return (\n//           <Section cls=\"SideNav\" size={`W200 H100`}>\n//               <h2>{this.props.title}</h2>\n//               <ol className=\"Col1\">\n//                   {this.render_col1()}\n//               </ol>\n//               <ol className=\"Col2\">\n//                   {this.render_col2()}\n//               </ol>\n//           </Section>\n//       )\n//   }\n// }\n// export default SideNav","map":{"version":3,"sources":["/Users/jneto/dev/proj/websites/anarp/src/components/Select.js"],"names":["React","Component","Card","Button","prepareOptions","options","map","e","i","key","label","defaultMenuItem","props","cls","selected","onSelect","defaulCardItem","Select","constructor","componentDidMount","mode","document","addEventListener","clickOutside","setState","selectedLabel","componentDidUpdate","prevProps","JSON","stringify","componentWillUnmount","removeEventListener","event","container","current","contains","target","open","state","close","select","n","value","setSelect","id","findIndex","onClick","dropDownValue","currentTarget","textContent","onSelectFlat","leaf","item","folder","icon","createRef","title","menuItem","cardItem","MODES","forEach","render","vertical","underline","left","build_idxs","menu","keys","idx1","length","idx2","push","find","idxs"],"mappings":"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D,IAAU;AAC3B,MAAG,CAACA,IAAJ,EAAU,OAAO,EAAP;AACV,MAAIC,IAAI,GAAG,EAAX;;AACA,OAAI,IAAIC,IAAI,GAAC,CAAb,EAAgBA,IAAI,GAACF,IAAI,CAACG,MAA1B,EAAkCD,IAAI,EAAtC,EACI,IAAG,UAAUF,IAAI,CAACE,IAAD,CAAjB,EACI,KAAI,IAAIE,IAAI,GAAC,CAAb,EAAgBA,IAAI,GAACJ,IAAI,CAACE,IAAD,CAAJ,CAAWF,IAAX,CAAgBG,MAArC,EAA6CC,IAAI,EAAjD,EACIH,IAAI,CAACI,IAAL,CAAU;AAAC,YAAQH,IAAT;AAAe,YAAQE;AAAvB,GAAV,EAFR,KAIIH,IAAI,CAACI,IAAL,CAAU;AAAC,YAAQH,IAAT;AAAe,YAAQ;AAAvB,GAAV;;AACR,SAAOD,IAAP;AACD,CAVD;;AAaA,MAAMK,IAAI,GAAG,CAACC,IAAD,EAAOL,IAAP,EAAaE,IAAb,KAAsBG,IAAI,CAAC5B,SAAL,CAAgBtC,CAAC,IAAKA,CAAC,CAAC6D,IAAF,KAASA,IAAT,IAAiB7D,CAAC,CAAC+D,IAAF,KAASA,IAAhD,CAAnC,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import React, { Component } from 'react'\nimport Card from './Card'\nimport Button from './Button'\nimport './Select.css'\n\n\nconst prepareOptions = (options) => (options && typeof options[0]==='string') ? options.map((e,i)=>({key:i, label: e})) : options\n\nconst defaultMenuItem = (props, i) => {\n  let cls = props.cls ? 'MenuItem' : ''\n  cls += (props.selected ? ' Selected' : '')\n  return <li className={cls} onClick={()=>props.onSelect(i)}>{props.label}</li>\n}\n\nconst defaulCardItem = (props, i) => {\n  let cls = props.cls\n  cls += (props.selected ? ' Selected' : '')\n  return <Card {...props} className={cls} onClick={()=>props.onSelect(i)}/>\n}\n\n\nclass Select extends Component {\n\n  constructor(props) {\n    super(props)\n    this.container = React.createRef()\n    this.state = {\n      open: false,\n      options: prepareOptions(this.props.options),\n      value: 'default',\n      selected: 0,\n      selectedLabel: '',\n      dropDownValue: this.props.title,\n    }\n    this.menuItem = this.props.menuItem || defaultMenuItem\n    this.cardItem = this.props.cardItem || defaulCardItem\n    const MODES = ['menu', 'icons', 'buttons', 'dropdown', 'pulldown', 'flat']\n    this.mode = null\n    MODES.forEach(e => {if(e in this.props) this.mode = e})\n  }\n\n  componentDidMount = () => {\n    if(this.mode === 'dropdown' || this.mode === 'pulldown')\n      document.addEventListener(\"mousedown\", this.clickOutside)\n    if(this.mode === 'flat')\n      this.setState({selectedLabel: this.props.options[1].label}) // --> Find first leaf\n    this.setState({options: prepareOptions(this.props.options)})\n  }\n\n  componentDidUpdate = (prevProps) => {\n    if(JSON.stringify(this.props.options) === JSON.stringify(prevProps.options))\n      return\n    this.setState({options: prepareOptions(this.props.options)})\n  }\n\n  componentWillUnmount = () => document.removeEventListener(\"mousedown\", this.clickOutside)\n\n  clickOutside = event => {\n    if(this.container.current && !this.container.current.contains(event.target))\n      this.setState({open: false})\n  }\n\n  open = () => this.setState({open:!this.state.open})\n  close = () => this.setState({open:false})\n\n  select = (n) => {\n    if(this.state.value!=this.state.options[n].label)\n      this.setState({value: this.state.options[n].label, open: false})\n    this.close()\n  }\n\n  setSelect = (id) => {\n    if(!this.state.options) return\n    let n = this.state.options.findIndex(e=>e.id===id)\n    this.setState({selected: n})\n  }\n\n  onClick = (e) => {\n    this.setState({dropDownValue: e.currentTarget.textContent})\n  }\n\n  onSelect = (n) => {\n    this.close()\n    this.setState({selected: n})\n    if(this.props.onSelect)\n      this.props.onSelect(n)\n  }\n\n  onSelectFlat = (e) => {\n    if(!e.leaf)\n      return\n    else\n      this.setState({selectedLabel: e.label})\n    if(this.props.onSelect)\n      this.props.onSelect(e)\n  }\n\n  item = (e) => {\n    let folder = 'leaf' in e && e.leaf===false\n    let icon = folder ? 'selector-right' : null\n    let cls = folder ? 'SelectFolder': 'SelectItem'\n    if(e.label === this.state.selectedLabel)\n      cls += ' Selected'\n    return (\n      <div className={`SelectRow ${cls}`} onClick={()=>this.onSelectFlat(e)}>\n        {icon && <Button icon={icon} iconsize={8}/>}\n        <li>{e.label}</li>\n      </div>\n    )\n  }\n\n  render() {\n    if(!this.state.options)\n      return null\n    let cls\n    switch(this.mode) {\n      case 'menu':\n          cls = this.props.vertical ? 'Select Menu Vertical' : 'Select Menu'\n          cls += this.props.underline ? ' Underline' : ''\n          cls += this.props.left ? ' Left' : ''\n          return(\n            <div className={cls}>\n                  {this.state.options.map ( (e,i) => {\n                    let selected = i==this.state.selected\n                    let props = {...e, selected: selected, onSelect: ()=>this.onSelect(i)}\n                    return this.menuItem(props, i)\n                  })}\n            </div>\n          )\n      case 'icons':\n        return(\n          <div className=\"Select Icons\" >\n            <div className='Group'>\n              {this.state.options.map ((e,i) =>\n                <Button icon={e.label} iconsize={20} id={i} selected={i==this.state.selected} onClick={e=>this.onSelect(i)}/>\n              )}\n            </div>\n          </div>\n        )\n      case 'buttons':\n          return(\n            <div className=\"Select Buttons\">\n              {this.state.options.map ((e,i) =>\n                  <Button text={e.label} id={i} selected={i==this.state.selected} onClick={e=>this.onSelect(i)}/>\n              )}\n            </div>\n          )\n      case 'dropdown':\n        return (\n          <div className=\"Select DropDown\" ref={this.container}>\n            {this.props.label && <span className=\"Label\">{this.props.label}</span>}\n            <div className=\"Filter\">\n              <div className=\"Value\" onClick={this.open}>\n                {this.state.options[this.state.selected].label}\n              </div>\n              <div className=\"Control\" onClick={this.open}>\n                <Button iconsize={12} icon=\"selector-down\" onClick={this.open}/>\n              </div>\n            </div>\n            {this.state.open && this.props.options &&\n              <div className=\"Options\">\n                {this.state.options.map(\n                  (e,i)=><li onClick={()=>this.select(i)}>{e.label}</li>)}\n              </div>\n            }\n          </div>\n        )\n      case 'pulldown':\n        return (\n          <div className=\"Select PullDown\" ref={this.container}>\n            <div className=\"PullDownButton\">\n              <Button iconsize={24} icon={this.props.icon} onClick={this.open}/>\n            </div>\n            {this.state.open && this.props.options &&\n              <div className=\"Options\">\n                {this.state.options.map((e,i) => {\n                  let props = {...e, onSelect: ()=>this.onSelect(i)}\n                  return this.menuItem(props, i)\n                })}\n              </div>\n            }\n          </div>\n        )\n      case 'flat':\n        return (\n          <div className=\"Select Flat\">\n            {this.props.title && <h2>{this.props.title}</h2>}\n            <div className=\"List\">\n              {this.state.options.map((e)=>this.item(e))}\n            </div>\n          </div>)\n      default:\n        return null\n    }\n  }\n}\n\nexport default Select\n\n\nconst build_idxs = (menu) => {\n  if(!menu) return []\n  let keys = []\n  for(let idx1=0; idx1<menu.length; idx1++)\n      if('menu' in menu[idx1])\n          for(let idx2=0; idx2<menu[idx1].menu.length; idx2++)\n              keys.push({'idx1': idx1, 'idx2': idx2})\n      else\n          keys.push({'idx1': idx1, 'idx2': null})\n  return keys\n}\n\n\nconst find = (idxs, idx1, idx2) => idxs.findIndex( e => (e.idx1===idx1 && e.idx2===idx2) )\n\n\n// class SideNav extends Component {\n//   constructor(props) {\n//       super(props)\n//       this.state = {\n//           idx: 0,\n//           idx1: 0,\n//           idx2: null,\n//           selectedLabel1: this.props.config ? this.props.config[0].label : null,\n//           selectedLabel2: null,\n//       }\n//       this.onClick1 = this.onClick1.bind(this)\n//       this.onClick2 = this.onClick2.bind(this)\n//       this.nav = this.nav.bind(this)\n//       this.menu = this.props.config\n//       this.idxs = build_idxs(this.props.config)\n//   }\n\n//   componentDidMount() {\n//       //this.setState({idx1: 0, idx2: 0, selectedLabel1: this.menu[0].label, selectedLabel2: this.menu[0].menu[0].label})\n//       //this.props.onAction(this.menu[0].menu[0])\n//   }\n\n//   nav_firt() {\n//       let label1 = this.menu[0].label\n//       let label2 = this.menu[0].menu[0].label\n//       this.setState({idx1: 0, idx2: 0, selectedLabel1: label1, selectedLabel2: label2})\n//       this.props.onAction(this.menu[0].menu[0])\n//   }\n\n//   nav(id) {\n//       let label1, label2\n//       let idx = find(this.idxs, this.state.idx1, this.state.idx2)\n//       if(id===0)\n//           idx = idx > 0 ? idx-1 : this.idxs.length-1\n//       if(id===1)\n//           idx = idx < this.idxs.length-1 ? idx+1 : 0\n//       let idx1 = this.idxs[idx].idx1\n//       let idx2 = this.idxs[idx].idx2\n//       label1 = this.menu[idx1].label\n//       if(idx2==null) {\n//           this.setState({idx1: idx1, idx2: null, selectedLabel1: label1, selectedLabel2: null})\n//           this.props.onAction(this.menu[idx1])\n//       } else {\n//           label2 = this.menu[idx1].menu[idx2].label\n//           this.setState({idx1: idx1, idx2: idx2, selectedLabel1: label1, selectedLabel2: label2})\n//           this.props.onAction(this.menu[idx1].menu[idx2])\n//       }\n//   }\n\n//   onClick1(label) {\n//       const idx1 = this.menu.findIndex(e => e.label===label)\n//       this.setState({ idx1: idx1, idx2: null, selectedLabel1: label })\n//       if('menu' in this.menu[idx1]) {\n//           this.setState({idx1: idx1, selectedLabel2: null})\n//           this.props.onAction(null)\n//           return\n//       }\n//       this.props.onAction(this.menu[idx1])\n//   }\n\n//   onClick2(label) {\n//       const idx2 = this.menu[this.state.idx1].menu.findIndex(e => e.label===label)\n//       this.setState({ idx2: idx2, selectedLabel2: label })\n//       this.props.onAction(this.menu[this.state.idx1].menu[idx2])\n//   }\n\n//   render_col1() {\n//       if(!this.props.config) return null\n//       let className\n//       return(\n//           this.props.config.map((e) => {\n//               className = e.label===this.state.selectedLabel1 ? className='selected' : ''\n//               return(<li className={className} onClick={_ => this.onClick1(e.label)}>{e.label}</li>)\n//           })\n//       )\n//   }\n\n//   render_col2() {\n//       if(!this.props.config) return null\n//       let className\n//       const idx1 = this.state.idx1\n//       if(idx1==null || !('menu' in this.props.config[idx1]))\n//           return undefined\n//       return(\n//           this.props.config[idx1].menu.map((e) => {\n//               className = e.label===this.state.selectedLabel2 ? className='selected' : ''\n//               return(<li className={className} onClick={_ => this.onClick2(e.label)}>{e.label}</li>)\n//       })\n//       )\n//   }\n\n//   render() {\n//       return (\n//           <Section cls=\"SideNav\" size={`W200 H100`}>\n//               <h2>{this.props.title}</h2>\n//               <ol className=\"Col1\">\n//                   {this.render_col1()}\n//               </ol>\n//               <ol className=\"Col2\">\n//                   {this.render_col2()}\n//               </ol>\n//           </Section>\n//       )\n//   }\n// }\n\n// export default SideNav\n"]},"metadata":{},"sourceType":"module"}