{"ast":null,"code":"var _jsxFileName = \"/Users/jneto/dev/proj/websites/anarp/src/components/Button.js\";\nimport React, { Component } from 'react';\nimport Icon from './Icon';\nimport './Button.css';\n\nclass Button extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setSelect = v => this.setState({\n      selected: v\n    });\n\n    this.onClick = () => {\n      //this.setState({selected: !this.state.selected})\n      this.setState({\n        selected: true\n      });\n      if (this.props.onClick) this.props.onClick(this);\n    };\n\n    this.state = {\n      selected: this.props.selected,\n      set: false\n    };\n    this.icon = this.props.icon || null;\n    this.type = null;\n    if ('text' in this.props) this.type = 'Text';else if (this.icon && !this.text) this.type = ` IconOnly`;\n    this.size = this.props.size || 'M';\n    this.iconsize = this.props.iconsize || 20;\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.selected === prevProps.selected) return;\n    this.setState({\n      selected: this.props.selected\n    });\n  }\n\n  render() {\n    let cls = `Button ${this.type}`;\n    if (this.props.cls) cls += ` ${this.props.cls}`;\n    if (this.props.size) cls += ` ${this.props.size}`;\n    if (this.state.selected) cls += ` Selected`;\n    return React.createElement(\"button\", {\n      className: cls,\n      onClick: this.onClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, this.icon && React.createElement(Icon, {\n      icon: this.icon,\n      size: this.iconsize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }), this.props.text && React.createElement(\"span\", {\n      className: \"ButtonText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, this.props.text));\n  }\n\n}\n\nexport default Button;","map":{"version":3,"sources":["/Users/jneto/dev/proj/websites/anarp/src/components/Button.js"],"names":["React","Component","Icon","Button","constructor","props","setSelect","v","setState","selected","onClick","state","set","icon","type","text","size","iconsize","componentDidUpdate","prevProps","prevState","render","cls"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,cAAP;;AAGA,MAAMC,MAAN,SAAqBF,SAArB,CAA+B;AAC3BG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAsBnBC,SAtBmB,GAsBNC,CAAD,IAAO,KAAKC,QAAL,CAAc;AAACC,MAAAA,QAAQ,EAAEF;AAAX,KAAd,CAtBA;;AAAA,SAwBnBG,OAxBmB,GAwBT,MAAM;AACZ;AACA,WAAKF,QAAL,CAAc;AAACC,QAAAA,QAAQ,EAAE;AAAX,OAAd;AACA,UAAG,KAAKJ,KAAL,CAAWK,OAAd,EAAuB,KAAKL,KAAL,CAAWK,OAAX,CAAmB,IAAnB;AAC1B,KA5BkB;;AAEf,SAAKC,KAAL,GAAa;AACTF,MAAAA,QAAQ,EAAE,KAAKJ,KAAL,CAAWI,QADZ;AAETG,MAAAA,GAAG,EAAE;AAFI,KAAb;AAIA,SAAKC,IAAL,GAAY,KAAKR,KAAL,CAAWQ,IAAX,IAAmB,IAA/B;AACA,SAAKC,IAAL,GAAY,IAAZ;AACA,QAAG,UAAU,KAAKT,KAAlB,EACI,KAAKS,IAAL,GAAY,MAAZ,CADJ,KAGI,IAAG,KAAKD,IAAL,IAAa,CAAC,KAAKE,IAAtB,EACI,KAAKD,IAAL,GAAa,WAAb;AACR,SAAKE,IAAL,GAAY,KAAKX,KAAL,CAAWW,IAAX,IAAmB,GAA/B;AACA,SAAKC,QAAL,GAAgB,KAAKZ,KAAL,CAAWY,QAAX,IAAuB,EAAvC;AACH;;AAEDC,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACrC,QAAG,KAAKf,KAAL,CAAWI,QAAX,KAAwBU,SAAS,CAACV,QAArC,EAA+C;AAC/C,SAAKD,QAAL,CAAc;AAACC,MAAAA,QAAQ,EAAE,KAAKJ,KAAL,CAAWI;AAAtB,KAAd;AACH;;AAUDY,EAAAA,MAAM,GAAG;AACL,QAAIC,GAAG,GAAI,UAAS,KAAKR,IAAK,EAA9B;AACA,QAAG,KAAKT,KAAL,CAAWiB,GAAd,EAAmBA,GAAG,IAAK,IAAG,KAAKjB,KAAL,CAAWiB,GAAI,EAA1B;AACnB,QAAG,KAAKjB,KAAL,CAAWW,IAAd,EAAoBM,GAAG,IAAK,IAAG,KAAKjB,KAAL,CAAWW,IAAK,EAA3B;AACpB,QAAG,KAAKL,KAAL,CAAWF,QAAd,EAAwBa,GAAG,IAAK,WAAR;AACxB,WACI;AAAQ,MAAA,SAAS,EAAEA,GAAnB;AAAwB,MAAA,OAAO,EAAE,KAAKZ,OAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKG,IAAL,IAAa,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAE,KAAKA,IAAjB;AAAuB,MAAA,IAAI,EAAE,KAAKI,QAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADlB,EAEK,KAAKZ,KAAL,CAAWU,IAAX,IAAmB;AAAM,MAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA8B,KAAKV,KAAL,CAAWU,IAAzC,CAFxB,CADJ;AAMH;;AA1C0B;;AA6C/B,eAAeZ,MAAf","sourcesContent":["import React, { Component } from 'react'\nimport Icon from './Icon'\nimport './Button.css'\n\n\nclass Button extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            selected: this.props.selected,\n            set: false,\n        }\n        this.icon = this.props.icon || null\n        this.type = null\n        if('text' in this.props)\n            this.type = 'Text'\n        else\n            if(this.icon && !this.text)\n                this.type = ` IconOnly`\n        this.size = this.props.size || 'M'\n        this.iconsize = this.props.iconsize || 20\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if(this.props.selected === prevProps.selected) return\n        this.setState({selected: this.props.selected})\n    }\n\n    setSelect = (v) => this.setState({selected: v})\n\n    onClick = () => {\n        //this.setState({selected: !this.state.selected})\n        this.setState({selected: true})\n        if(this.props.onClick) this.props.onClick(this)\n    }\n\n    render() {\n        let cls = `Button ${this.type}`\n        if(this.props.cls) cls += ` ${this.props.cls}`\n        if(this.props.size) cls += ` ${this.props.size}`\n        if(this.state.selected) cls += ` Selected`\n        return(\n            <button className={cls} onClick={this.onClick}>\n                {this.icon && <Icon icon={this.icon} size={this.iconsize} />}\n                {this.props.text && <span className=\"ButtonText\">{this.props.text}</span>}\n            </button>\n        )\n    }\n}\n\nexport default Button\n"]},"metadata":{},"sourceType":"module"}